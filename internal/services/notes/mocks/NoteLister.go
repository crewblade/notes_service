// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/crewblade/notes_service/internal/domain/models"
	mock "github.com/stretchr/testify/mock"
)

// NoteLister is an autogenerated mock type for the NoteLister type
type NoteLister struct {
	mock.Mock
}

// GetNotes provides a mock function with given fields: ctx, limit, offset_id
func (_m *NoteLister) GetNotes(ctx context.Context, limit int32, offset_id string) ([]models.Note, string, error) {
	ret := _m.Called(ctx, limit, offset_id)

	if len(ret) == 0 {
		panic("no return value specified for GetNotes")
	}

	var r0 []models.Note
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, string) ([]models.Note, string, error)); ok {
		return rf(ctx, limit, offset_id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, string) []models.Note); ok {
		r0 = rf(ctx, limit, offset_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Note)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, string) string); ok {
		r1 = rf(ctx, limit, offset_id)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int32, string) error); ok {
		r2 = rf(ctx, limit, offset_id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewNoteLister creates a new instance of NoteLister. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNoteLister(t interface {
	mock.TestingT
	Cleanup(func())
}) *NoteLister {
	mock := &NoteLister{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
