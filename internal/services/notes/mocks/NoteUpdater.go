// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/crewblade/notes_service/internal/domain/models"
	mock "github.com/stretchr/testify/mock"
)

// NoteUpdater is an autogenerated mock type for the NoteUpdater type
type NoteUpdater struct {
	mock.Mock
}

// UpdateNote provides a mock function with given fields: ctx, id, title, content
func (_m *NoteUpdater) UpdateNote(ctx context.Context, id string, title string, content string) (models.Note, error) {
	ret := _m.Called(ctx, id, title, content)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNote")
	}

	var r0 models.Note
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (models.Note, error)); ok {
		return rf(ctx, id, title, content)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) models.Note); ok {
		r0 = rf(ctx, id, title, content)
	} else {
		r0 = ret.Get(0).(models.Note)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, id, title, content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewNoteUpdater creates a new instance of NoteUpdater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNoteUpdater(t interface {
	mock.TestingT
	Cleanup(func())
}) *NoteUpdater {
	mock := &NoteUpdater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
